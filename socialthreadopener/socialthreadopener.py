Tu as raison, le probl√®me vient de la logique de d√©tection. Je vais corriger √ßa. Le souci est que la fonction v√©rifie d'abord les liens avant de v√©rifier s'il faut supprimer. Voici la version corrig√©e :
import re
import asyncio
import aiohttp
import json
from typing import Optional
import discord
from redbot.core import commands, Config, checks
from redbot.core.bot import Red
from redbot.core.utils.chat_formatting import humanize_list


class SocialThreadOpener(commands.Cog):
    """
    Cr√©e automatiquement des threads pour les liens YouTube, TikTok et Instagram
    """

    __version__ = "1.1.1"

    def __init__(self, bot: Red):
        self.bot = bot
        self.config = Config.get_conf(
            self, identifier=208903205982044161, force_registration=True
        )
        
        default_guild = {
            "enabled": False,
            "channels": [],
            "thread_name_format": "{title}",
            "delay": 2,
            "platforms": {
                "youtube": True,
                "tiktok": True,
                "instagram": True
            },
            "fetch_titles": True,
            "fallback_format": "Discussion: {platform}",
            "max_title_length": 80,
            # Nouvelles options pour la mod√©ration
            "link_only_mode": False,
            "delete_non_links": False,
            "warning_message": "‚ùå Ce canal est r√©serv√© aux liens YouTube, TikTok et Instagram uniquement!",
            "whitelist_roles": [],
            "allow_media": True,
        }
        
        self.config.register_guild(**default_guild)
        
        # Expressions r√©guli√®res am√©lior√©es
        self.url_patterns = {
            "youtube": re.compile(
                r'(?:https?://)?(?:www\.)?(youtube\.com/watch\?v=|youtu\.be/|youtube\.com/shorts/)([a-zA-Z0-9_-]+)',
                re.IGNORECASE
            ),
            "tiktok": re.compile(
                r'(?:https?://)?(?:www\.)?(tiktok\.com/@[^/\s]+/video/\d+|vm\.tiktok\.com/[a-zA-Z0-9]+)',
                re.IGNORECASE
            ),
            "instagram": re.compile(
                r'(?:https?://)?(?:www\.)?(instagram\.com/(?:p|reel)/[a-zA-Z0-9_-]+)',
                re.IGNORECASE
            )
        }

    # [Toutes tes commandes restent identiques jusqu'√† on_message]
    @commands.group(name="socialthread", aliases=["st"])
    @commands.guild_only()
    @checks.admin_or_permissions(manage_guild=True)
    async def social_thread(self, ctx):
        """Configuration du Social Thread Opener"""
        pass

    @social_thread.command(name="enable")
    async def enable_social_thread(self, ctx):
        """Active le Social Thread Opener pour ce serveur"""
        await self.config.guild(ctx.guild).enabled.set(True)
        await ctx.send("‚úÖ Social Thread Opener activ√© pour ce serveur!")

    @social_thread.command(name="disable")
    async def disable_social_thread(self, ctx):
        """D√©sactive le Social Thread Opener pour ce serveur"""
        await self.config.guild(ctx.guild).enabled.set(False)
        await ctx.send("‚ùå Social Thread Opener d√©sactiv√© pour ce serveur.")

    @social_thread.command(name="addchannel")
    async def add_channel(self, ctx, channel: discord.TextChannel = None):
        """Ajoute un canal √† la liste des canaux surveill√©s"""
        if channel is None:
            channel = ctx.channel
        
        async with self.config.guild(ctx.guild).channels() as channels:
            if channel.id not in channels:
                channels.append(channel.id)
                await ctx.send(f"‚úÖ Canal {channel.mention} ajout√© √† la surveillance!")
            else:
                await ctx.send(f"‚ö†Ô∏è Canal {channel.mention} d√©j√† dans la liste!")

    @social_thread.command(name="removechannel")
    async def remove_channel(self, ctx, channel: discord.TextChannel = None):
        """Retire un canal de la liste des canaux surveill√©s"""
        if channel is None:
            channel = ctx.channel
        
        async with self.config.guild(ctx.guild).channels() as channels:
            if channel.id in channels:
                channels.remove(channel.id)
                await ctx.send(f"‚úÖ Canal {channel.mention} retir√© de la surveillance!")
            else:
                await ctx.send(f"‚ö†Ô∏è Canal {channel.mention} n'√©tait pas surveill√©!")

    @social_thread.command(name="linkonly")
    async def toggle_link_only(self, ctx):
        """Active/d√©sactive le mode 'liens uniquement' pour les canaux surveill√©s"""
        current = await self.config.guild(ctx.guild).delete_non_links()
        await self.config.guild(ctx.guild).delete_non_links.set(not current)
        
        status = "‚úÖ ACTIV√â" if not current else "‚ùå D√âSACTIV√â"
        
        if not current:
            await ctx.send(f"üîí **Mode 'liens uniquement' {status}!**\n"
                          f"‚ñ´Ô∏è Les messages sans liens YouTube/TikTok/Instagram seront supprim√©s dans les canaux surveill√©s\n"
                          f"‚ñ´Ô∏è Un message d'avertissement sera envoy√© √† l'utilisateur\n"
                          f"‚ñ´Ô∏è Les admins et r√¥les exempt√©s ne sont pas affect√©s")
        else:
            await ctx.send(f"üîì **Mode 'liens uniquement' {status}!**\n"
                          f"‚ñ´Ô∏è Tous les messages sont maintenant autoris√©s")

    @social_thread.command(name="setwarning")
    async def set_warning_message(self, ctx, *, message: str):
        """D√©finit le message d'avertissement pour les messages supprim√©s"""
        if len(message) > 200:
            await ctx.send("‚ùå Le message d'avertissement ne peut pas d√©passer 200 caract√®res!")
            return
            
        await self.config.guild(ctx.guild).warning_message.set(message)
        await ctx.send(f"‚úÖ **Message d'avertissement d√©fini:**\n```{message}```")

    @social_thread.command(name="addrole")
    async def add_whitelist_role(self, ctx, role: discord.Role):
        """Ajoute un r√¥le √† la liste des exemptions (peut poster sans liens)"""
        async with self.config.guild(ctx.guild).whitelist_roles() as roles:
            if role.id not in roles:
                roles.append(role.id)
                await ctx.send(f"‚úÖ R√¥le {role.mention} ajout√© aux exemptions du mode 'liens uniquement'!")
            else:
                await ctx.send(f"‚ö†Ô∏è R√¥le {role.mention} d√©j√† dans les exemptions!")

    @social_thread.command(name="removerole")
    async def remove_whitelist_role(self, ctx, role: discord.Role):
        """Retire un r√¥le de la liste des exemptions"""
        async with self.config.guild(ctx.guild).whitelist_roles() as roles:
            if role.id in roles:
                roles.remove(role.id)
                await ctx.send(f"‚úÖ R√¥le {role.mention} retir√© des exemptions!")
            else:
                await ctx.send(f"‚ö†Ô∏è R√¥le {role.mention} n'√©tait pas dans les exemptions!")

    @social_thread.command(name="allowmedia")
    async def toggle_allow_media(self, ctx):
        """Active/d√©sactive l'autorisation des fichiers/images sans liens"""
        current = await self.config.guild(ctx.guild).allow_media()
        await self.config.guild(ctx.guild).allow_media.set(not current)
        
        status = "‚úÖ AUTORIS√âS" if not current else "‚ùå NON AUTORIS√âS"
        await ctx.send(f"üìé **Fichiers et images {status}** dans le mode 'liens uniquement'!")

    # [Garde toutes tes autres commandes: channels, platforms, format, titles, delay, etc.]
    @social_thread.command(name="channels")
    async def list_channels(self, ctx):
        """Liste les canaux surveill√©s"""
        channels_ids = await self.config.guild(ctx.guild).channels()
        if not channels_ids:
            await ctx.send("Aucun canal n'est surveill√©.")
            return
        
        channels = []
        for channel_id in channels_ids:
            channel = ctx.guild.get_channel(channel_id)
            if channel:
                channels.append(channel.mention)
        
        if channels:
            await ctx.send(f"**Canaux surveill√©s:** {humanize_list(channels)}")
        else:
            await ctx.send("Aucun canal valide trouv√© dans la liste.")

    @social_thread.command(name="settings")
    async def show_settings(self, ctx):
        """Affiche la configuration actuelle"""
        guild_config = await self.config.guild(ctx.guild).all()
        
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration Social Thread Opener",
            color=0x00ff00 if guild_config["enabled"] else 0xff0000
        )
        
        # Status principal
        embed.add_field(
            name="üìä Statut g√©n√©ral",
            value="‚úÖ Activ√©" if guild_config["enabled"] else "‚ùå D√©sactiv√©",
            inline=True
        )
        
        # Mode liens uniquement
        embed.add_field(
            name="üîí Mode liens uniquement",
            value="‚úÖ Activ√©" if guild_config.get("delete_non_links", False) else "‚ùå D√©sactiv√©",
            inline=True
        )
        
        # M√©dias autoris√©s
        embed.add_field(
            name="üìé Fichiers/Images",
            value="‚úÖ Autoris√©s" if guild_config.get("allow_media", True) else "‚ùå Interdits",
            inline=True
        )
        
        # Message d'avertissement (seulement si mode actif)
        if guild_config.get("delete_non_links", False):
            warning = guild_config.get("warning_message", "Message par d√©faut")
            embed.add_field(
                name="‚ö†Ô∏è Message d'avertissement",
                value=f"```{warning[:100]}{'...' if len(warning) > 100 else ''}```",
                inline=False
            )
        
        # R√¥les exempt√©s
        whitelist_roles = guild_config.get("whitelist_roles", [])
        if whitelist_roles:
            roles = []
            for role_id in whitelist_roles[:5]:
                role = ctx.guild.get_role(role_id)
                if role:
                    roles.append(f"@{role.name}")
            if roles:
                embed.add_field(
                    name="üëë R√¥les exempt√©s",
                    value=", ".join(roles),
                    inline=False
                )
        
        # Commandes utiles
        embed.add_field(
            name="üîß Commandes principales",
            value="`!st linkonly` - Activer mode liens uniquement\n"
                  "`!st setwarning` - Message d'avertissement\n"
                  "`!st addrole` - Exempter un r√¥le\n"
                  "`!st allowmedia` - Autoriser m√©dias",
            inline=False
        )
        
        await ctx.send(embed=embed)

    @social_thread.command(name="test")
    async def test_moderation(self, ctx):
        """Teste si le mode mod√©ration fonctionne dans ce canal"""
        guild_config = await self.config.guild(ctx.guild).all()
        
        if not guild_config["enabled"]:
            await ctx.send("‚ùå Le cog n'est pas activ√©!")
            return
        
        if ctx.channel.id not in guild_config["channels"]:
            await ctx.send("‚ùå Ce canal n'est pas surveill√©!")
            return
        
        if not guild_config.get("delete_non_links", False):
            await ctx.send("‚ùå Le mode 'liens uniquement' n'est pas activ√©!")
            return
        
        await ctx.send("‚úÖ **Test de mod√©ration:**\n"
                      f"‚ñ´Ô∏è Canal surveill√©: ‚úÖ\n"
                      f"‚ñ´Ô∏è Mode liens uniquement: ‚úÖ\n"
                      f"‚ñ´Ô∏è √âcris un message sans lien pour tester!")

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """üî• FONCTION PRINCIPALE - G√®re la mod√©ration ET la cr√©ation de threads"""
        # V√©rifications de base
        if message.author.bot or not message.guild:
            return
        
        guild_config = await self.config.guild(message.guild).all()
        
        if not guild_config["enabled"]:
            return
        
        # V√©rifie si c'est un canal surveill√©
        if guild_config["channels"] and message.channel.id not in guild_config["channels"]:
            return
        
        # Ignore les threads
        if isinstance(message.channel, discord.Thread):
            return
        
        # V√©rifie les permissions
        if not message.channel.permissions_for(message.guild.me).manage_messages:
            print("‚ö†Ô∏è Pas de permissions pour supprimer les messages")
            return
            
        if not message.channel.permissions_for(message.guild.me).create_public_threads:
            return
        
        print(f"üîç Message analys√© de {message.author.display_name}: '{message.content[:50]}...'")
        
        # üÜï √âTAPE 1: V√âRIFICATION MOD√âRATION EN PREMIER
        delete_non_links = guild_config.get("delete_non_links", False)
        print(f"üîí Mode liens uniquement: {delete_non_links}")
        
        if delete_non_links:
            # V√©rifications d'exemption
            is_exempt = await self._is_user_exempt(message, guild_config)
            print(f"üëë Utilisateur exempt√©: {is_exempt}")
            
            if not is_exempt:
                has_social_links = self._has_social_media_links(message, guild_config)
                print(f"üîó A des liens sociaux: {has_social_links}")
                
                if not has_social_links:
                    # V√©rifie si m√©dias autoris√©s
                    has_media = bool(message.attachments or message.embeds)
                    allow_media = guild_config.get("allow_media", True)
                    print(f"üìé A des m√©dias: {has_media}, autoris√©s: {allow_media}")
                    
                    if not (has_media and allow_media):
                        # üóëÔ∏è SUPPRIME LE MESSAGE
                        await self._delete_and_warn(message, guild_config)
                        return  # ARR√äTE ici, ne cr√©e pas de thread
        
        # üÜï √âTAPE 2: SI PAS SUPPRIM√â, V√âRIFIE POUR THREADS
        detected_platforms, detected_urls = self._detect_social_links(message, guild_config)
        
        if detected_platforms:
            print(f"üì± Plateformes d√©tect√©es pour thread: {detected_platforms}")
            
            if guild_config["delay"] > 0:
                await asyncio.sleep(guild_config["delay"])
            
            await self._create_thread_simplified(message, detected_platforms, detected_urls, guild_config)

    async def _is_user_exempt(self, message: discord.Message, config: dict) -> bool:
        """V√©rifie si l'utilisateur est exempt√© de la mod√©ration"""
        # Admins et mod√©rateurs sont toujours exempt√©s
        if message.author.guild_permissions.manage_messages or message.author.guild_permissions.administrator:
            return True
        
        # V√©rifie les r√¥les exempt√©s
        whitelist_roles = config.get("whitelist_roles", [])
        if whitelist_roles:
            user_roles = [role.id for role in message.author.roles]
            if any(role_id in user_roles for role_id in whitelist_roles):
                return True
        
        return False

    def _has_social_media_links(self, message: discord.Message, config: dict) -> bool:
        """V√©rifie si le message contient des liens de r√©seaux sociaux support√©s"""
        for platform, pattern in self.url_patterns.items():
            if config["platforms"][platform] and pattern.search(message.content):
                return True
        return False

    def _detect_social_links(self, message: discord.Message, config: dict) -> tuple:
        """D√©tecte les liens sociaux pour cr√©er des threads"""
        detected_platforms = []
        detected_urls = {}
        
        for platform, pattern in self.url_patterns.items():
            if config["platforms"][platform]:
                if platform == "youtube":
                    youtube_matches = re.findall(
                        r'(?:https?://)?(?:www\.)?(youtube\.com/watch\?v=|youtu\.be/|youtube\.com/shorts/)([a-zA-Z0-9_-]+)', 
                        message.content, re.IGNORECASE
                    )
                    if youtube_matches:
                        detected_platforms.append(platform)
                        url_base, video_id = youtube_matches[0]
                        if "youtu.be/" in url_base or "youtube.com/shorts/" in url_base:
                            detected_urls[platform] = f"https://www.youtube.com/watch?v={video_id}"
                        else:
                            detected_urls[platform] = f"https://www.youtube.com/watch?v={video_id}"
                else:
                    matches = pattern.findall(message.content)
                    if matches:
                        detected_platforms.append(platform)
        
        return detected_platforms, detected_urls

    async def _delete_and_warn(self, message: discord.Message, config: dict):
        """Supprime le message et envoie un avertissement"""
        try:
            print(f"üóëÔ∏è Suppression du message de {message.author.display_name}")
            
            # Supprime le message
            await message.delete()
            
            # Pr√©pare le message d'avertissement
            warning_msg = config.get("warning_message", "‚ùå Ce canal est r√©serv√© aux liens YouTube, TikTok et Instagram uniquement!")
            
            # Cr√©e un message temporaire avec bouton
            view = DismissView()
            
            try:
                warning_message = await message.channel.send(
                    f"üö´ {message.author.mention} {warning_msg}",
                    view=view,
                    delete_after=20  # Supprime apr√®s 20 secondes
                )
                print(f"‚ö†Ô∏è Avertissement envoy√© √† {message.author.display_name}")
            except Exception as e:
                print(f"‚ùå Erreur envoi avertissement: {e}")
                
        except discord.NotFound:
            print("‚ö†Ô∏è Message d√©j√† supprim√©")
        except discord.Forbidden:
            print("‚ùå Pas de permissions pour supprimer")
        except Exception as e:
            print(f"üí• Erreur suppression: {e}")

    # [Garde toutes tes m√©thodes existantes: _get_youtube_title, _clean_youtube_title, _create_thread_simplified]
    async def _get_youtube_title(self, url: str) -> Optional[str]:
        """R√©cup√®re le titre YouTube avec plusieurs m√©thodes de fallback"""
        try:
            print(f"üé¨ R√©cup√©ration titre YouTube: {url}")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none'
            }
            
            timeout = aiohttp.ClientTimeout(total=20)
            connector = aiohttp.TCPConnector(ssl=False)
            
            async with aiohttp.ClientSession(timeout=timeout, headers=headers, connector=connector) as session:
                async with session.get(url, allow_redirects=True) as response:
                    print(f"üì° Status HTTP: {response.status}")
                    
                    if response.status != 200:
                        return None
                    
                    try:
                        html = await response.text(encoding='utf-8')
                    except:
                        html = await response.text(encoding='latin-1')
                    
                    patterns = [
                        (r'<meta\s+property=["\']og:title["\']\s+content=["\']([^"\']*)["\']', "og:title"),
                        (r'<meta\s+name=["\']title["\']\s+content=["\']([^"\']*)["\']', "meta title"),
                        (r'"videoDetails":\s*{[^}]*"title":\s*"([^"]*)"', "videoDetails JSON"),
                        (r'<title>([^<]+?)\s*(?:-\s*YouTube)?</title>', "page title"),
                        (r'<meta\s+property="twitter:title"\s+content="([^"]*)"', "twitter:title"),
                        (r'"title":{"runs":\[{"text":"([^"]*)"', "runs title"),
                    ]
                    
                    for pattern, method_name in patterns:
                        matches = re.findall(pattern, html, re.IGNORECASE | re.DOTALL)
                        if matches:
                            for match in matches:
                                title = match.strip()
                                if title and len(title) > 3:
                                    cleaned_title = self._clean_youtube_title(title)
                                    if len(cleaned_title) > 3:
                                        print(f"‚úÖ Titre trouv√© via {method_name}: '{cleaned_title}'")
                                        return cleaned_title
                    
                    return None
                    
        except Exception as e:
            print(f"üí• Erreur r√©cup√©ration titre YouTube: {e}")
            return None

    def _clean_youtube_title(self, title: str) -> str:
        """Nettoie sp√©cifiquement les titres YouTube"""
        if not title:
            return ""
        
        import html
        title = html.unescape(title)
        
        suffixes_to_remove = [
            r'\s*-\s*YouTube\s*$',
            r'\s*\|\s*YouTube\s*$',
            r'\s*‚Ä¢\s*YouTube\s*$',
            r'\s*-\s*Video\s*$',
        ]
        
        for suffix in suffixes_to_remove:
            title = re.sub(suffix, '', title, flags=re.IGNORECASE)
        
        title = re.sub(r'\s+', ' ', title).strip()
        title = re.sub(r'^[^\w]+|[^\w]+$', '', title)
        
        return title

    async def _create_thread_simplified(self, message: discord.Message, platforms: list, urls: dict, config: dict):
        """Version simplifi√©e de cr√©ation de thread"""
        try:
            thread_name = ""
            author_name = message.author.display_name
            
            print(f"üßµ Cr√©ation thread pour: {platforms}")
            
            if "youtube" in platforms and config["fetch_titles"]:
                url = urls.get("youtube")
                if url:
                    title = await self._get_youtube_title(url)
                    if title and len(title.strip()) > 0:
                        max_length = config.get('max_title_length', 80)
                        if len(title) > max_length:
                            title = title[:max_length-3] + "..."
                        
                        try:
                            thread_name = config["thread_name_format"].format(
                                title=title,
                                platform="YouTube",
                                author=author_name
                            )
                        except KeyError:
                            thread_name = title
            
            if not thread_name or len(thread_name.strip()) == 0:
                if len(platforms) == 1:
                    platform = platforms[0]
                    if platform in ["instagram", "tiktok"]:
                        thread_name = f"Thread de {author_name}"
                    elif platform == "youtube":
                        thread_name = f"Vid√©o de {author_name}"
                else:
                    thread_name = f"Thread de {author_name}"
            
            thread_name = re.sub(r'[<>:"/\\|?*]', '', thread_name)
            thread_name = re.sub(r'\s+', ' ', thread_name).strip()
            
            if len(thread_name) > 100:
                thread_name = thread_name[:97] + "..."
            
            if len(thread_name) < 1:
                thread_name = f"Thread de {author_name}"
            
            thread = await message.create_thread(
                name=thread_name,
                auto_archive_duration=1440
            )
            
            if len(platforms) == 1:
                platform = platforms[0]
                if platform == "youtube":
                    intro = f"Thread cr√©√© pour discuter de cette vid√©o YouTube partag√©e par {message.author.mention}!"
                elif platform == "instagram":
                    intro = f"Thread cr√©√© pour discuter de ce post Instagram partag√© par {message.author.mention}!"
                elif platform == "tiktok":
                    intro = f"Thread cr√©√© pour discuter de cette vid√©o TikTok partag√©e par {message.author.mention}!"
                else:
                    intro = f"Thread cr√©√© pour discuter du contenu {platform.title()} partag√© par {message.author.mention}!"
            else:
                platform_list = ", ".join([p.title() for p in platforms])
                intro = f"Thread cr√©√© pour discuter du contenu {platform_list} partag√© par {message.author.mention}!"
            
            await thread.send(intro)
            print(f"üéâ Thread '{thread_name}' cr√©√© avec succ√®s!")
            
        except Exception as e:
            print(f"üí• Erreur cr√©ation thread: {e}")

    def cog_unload(self):
        """Nettoyage lors du d√©chargement du cog"""
        pass


# Classe pour le bouton "Fermer" sur les messages d'avertissement
class DismissView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)
    
    @discord.ui.button(label="‚úñÔ∏è Fermer", style=discord.ButtonStyle.secondary)
    async def dismiss_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.message.delete()
        except:
            await interaction.response.send_message("Message supprim√©!", ephemeral=True)


async def setup(bot):
    await bot.add_cog(SocialThreadOpener(bot))
